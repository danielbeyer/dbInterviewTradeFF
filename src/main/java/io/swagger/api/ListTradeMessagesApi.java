/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.13).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import com.fasterxml.jackson.databind.ObjectMapper;
import io.swagger.annotations.*;
import io.swagger.model.TradeMessage;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import javax.validation.constraints.Max;
import javax.validation.constraints.Min;
import java.io.IOException;
import java.util.List;
import java.util.Optional;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2020-05-10T16:56:11.041Z")

@Api(value = "listTradeMessages", description = "the listTradeMessages API")
@RequestMapping(value = "/c5764/dbInterviewShowcase/1.0.0")
public interface ListTradeMessagesApi {

    Logger log = LoggerFactory.getLogger(ListTradeMessagesApi.class);

    default Optional<ObjectMapper> getObjectMapper() {
        return Optional.empty();
    }

    default Optional<HttpServletRequest> getRequest() {
        return Optional.empty();
    }

    default Optional<String> getAcceptHeader() {
        return getRequest().map(r -> r.getHeader("Accept"));
    }

    @ApiOperation(value = "returns all trade message", nickname = "lsitTradeMessages", notes = "By passing in the appropriate options, you can search for available inventory in the system ", response = TradeMessage.class, responseContainer = "List", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "search results matching criteria", response = TradeMessage.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "bad input parameter") })
    @RequestMapping(value = "/listTradeMessages",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<List<TradeMessage>> listTradeMessages(@ApiParam(value = "pass an optional search string for looking up inventory") @Valid @RequestParam(value = "searchString", required = false) String searchString, @Min(0) @ApiParam(value = "number of records to skip for pagination") @Valid @RequestParam(value = "skip", required = false) Integer skip, @Min(0) @Max(50) @ApiParam(value = "maximum number of records to return") @Valid @RequestParam(value = "limit", required = false) Integer limit) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("[ {  \"stmtId\" : \"s00009699633\",  \"secNo\" : 514000,  \"acctNo\" : 1000303857,  \"dbTimestamp\" : \"2020-03-16T15:40:00.000Z\",  \"numbers\" : \"+0000000000021,0000\",  \"tradeDate\" : \"2020-05-08T00:00:00.000Z\"}, {  \"stmtId\" : \"s00009699633\",  \"secNo\" : 514000,  \"acctNo\" : 1000303857,  \"dbTimestamp\" : \"2020-03-16T15:40:00.000Z\",  \"numbers\" : \"+0000000000021,0000\",  \"tradeDate\" : \"2020-05-08T00:00:00.000Z\"} ]", List.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default ListTradeMessagesApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }

}
